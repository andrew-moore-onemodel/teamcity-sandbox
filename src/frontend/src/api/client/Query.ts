//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../client';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions  } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import { Client as ClientClass } from '../client';
import { createClient, getClientFactory } from './helpers';

export const Client = () => getClientFactory()(ClientClass);

    
export function getWeatherForecastUrl(): string {
  let url_ = getBaseUrl() + "/WeatherForecast";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getWeatherForecastDefaultOptions: UseQueryOptions<Types.WeatherForecast[], unknown, Types.WeatherForecast[]> = {
  queryFn: __getWeatherForecast,
};
export function getGetWeatherForecastDefaultOptions(): UseQueryOptions<Types.WeatherForecast[], unknown, Types.WeatherForecast[]> {
  return getWeatherForecastDefaultOptions;
};
export function setGetWeatherForecastDefaultOptions(options: UseQueryOptions<Types.WeatherForecast[], unknown, Types.WeatherForecast[]>) {
  getWeatherForecastDefaultOptions = options;
}

export function getWeatherForecastQueryKey(): QueryKey;
export function getWeatherForecastQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
      'Client',
      'getWeatherForecast',
    ]);
}
function __getWeatherForecast() {
  return Client().getWeatherForecast(
    );
}

/**
 * @return Success
 */
export function useGetWeatherForecastQuery<TSelectData = Types.WeatherForecast[], TError = unknown>(options?: UseQueryOptions<Types.WeatherForecast[], TError, TSelectData>): UseQueryResult<TSelectData, TError>;
export function useGetWeatherForecastQuery<TSelectData = Types.WeatherForecast[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.WeatherForecast[], TError, TSelectData> | undefined = undefined;
  

  options = params[0] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.WeatherForecast[], TError, TSelectData>({
    queryFn: __getWeatherForecast,
    queryKey: getWeatherForecastQueryKey(),
    ...getWeatherForecastDefaultOptions as unknown as UseQueryOptions<Types.WeatherForecast[], TError, TSelectData>,
    ...options,
  });
}
/**
 * @return Success
 */
export function setGetWeatherForecastData(queryClient: QueryClient, updater: (data: Types.WeatherForecast[] | undefined) => Types.WeatherForecast[], ) {
  queryClient.setQueryData(getWeatherForecastQueryKey(),
    updater
  );
}

/**
 * @return Success
 */
export function setGetWeatherForecastDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.WeatherForecast[] | undefined) => Types.WeatherForecast[]) {
  queryClient.setQueryData(queryKey, updater);
}